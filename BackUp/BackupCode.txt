void Renderer::excompute()
	{
		unsigned int arr[126];
		for (int i = 0; i < 126; ++i)
			arr[i] = i;

		unsigned int arr2[126]{ 0 };

		SBuffer<unsigned int> readBuffer(SBufferType::Read, arr, 126);
		SBuffer<unsigned int> writeBuffer(SBufferType::Write, arr2, 126);

		auto shader = ShaderArchive::Get("ComputeBasic");
		shader->Bind();

		readBuffer.Bind(0);
		writeBuffer.SetAsTarget(0);
		shader->Dipatch(2, 3, 1);

		auto v = writeBuffer.GetData();
		for (int i = 0; i < 130; ++i)
		{
			std::cout << v[i] << " ";
			if (i % 10 == 0) std::cout << "\n";
		}
	}

	void Renderer::excompute2(std::shared_ptr<Model3D> model)
	{
		static bool first = true;
		static std::shared_ptr<Texture> uav;
		static std::shared_ptr<Texture> stone = TextureArchive::Get("stone01");
		static std::shared_ptr<Texture> apple = TextureArchive::Get("apple");
		if (first)
		{
			TextureArchive::Add("UAV", 512, 512, true, true);
			auto shader = ShaderArchive::Get("ComputeTexture");
			shader->Bind();

			uav = TextureArchive::Get("UAV");
			stone->SetComputeResource(0);
			apple->SetComputeResource(1);
			uav->SetComputeOuput();

			shader->Dipatch(32, 32, 1);
			first = false;
			shader->Unbind();

			//Notice : This Process must be needed!(Unbind Resource)
			ID3D11UnorderedAccessView* nullUAV = nullptr;
			Dx11Core::Get().Context->CSSetUnorderedAccessViews(0, 1, &nullUAV, nullptr);
		}

		auto twod = ShaderArchive::Get("2D");
		twod->Bind();

		s_Data.PLController->ClearRTT();

		s_Data.PLController->SetRenderTarget("BackBuffer");

		s_Data.PLController->SetDepthStencil(DepthStencilOpt::Enable);
		s_Data.PLController->SetRasterize(RasterlizerOpt::Solid);

		Engine::Transform t;
		t.SetScale(0.5f, 0.5f, 1.0f);

		twod->SetParam<CBuffer::Transform>(t);

		s_Data.ModelBuffer2D->Bind();
		uav->Bind(0);
		Dx11Core::Get().Context->DrawIndexed(s_Data.ModelBuffer2D->GetIndexCount(), 0, 0);
	}

	void Renderer::exstreamout(std::shared_ptr<Model3D> model)
	{
		s_Data.PLController->ClearRTT();

		s_Data.PLController->SetRenderTarget("BackBuffer");

		s_Data.PLController->SetDepthStencil(DepthStencilOpt::Disable);
		s_Data.PLController->SetRasterize(RasterlizerOpt::Wire);

		auto shader = ShaderArchive::Get("EtcStreamout");
		shader->Bind();
		ID3D11PixelShader* ps = nullptr;

		SOBuffer sobuffer;
		sobuffer.Bind();

		model->m_ModelBuffer->Bind();
		Dx11Core::Get().Context->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST);

		Dx11Core::Get().Context->DrawIndexed(model->m_ModelBuffer->GetIndexCount(), 0, 0);
		sobuffer.Unbind();
		shader->Unbind();

		auto d = sobuffer.GetData();
		for (int i = 0; i < 100; ++i)
		{
			//d[i].print();
		}

		shader = ShaderArchive::Get("EtcCheckSO");
		shader->Bind();

		uint32_t stride = 36;
		uint32_t offset = 0;
		Dx11Core::Get().Context->IASetVertexBuffers(0, 1, &sobuffer.m_OutstreamBuffer, &stride, &offset);
		Dx11Core::Get().Context->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

		Dx11Core::Get().Context->DrawAuto();
	}

	void Renderer::exavlum(const std::string& texture)
	{
		auto tex = TextureArchive::Get(texture);

		auto width = tex->Width;
		auto height = tex->Height;

		{
			ENABLE_ELAPSE
			auto shader = ShaderArchive::Get("HDRAverage");

			shader->Bind();
			float* a = nullptr;
			SBuffer<float> buffer(SBufferType::Write, a, 20000);
			buffer.SetAsTarget(0);
			Dx11Core::Get().Context->CSSetShaderResources(0, 1, &tex->m_ResourceView);

			uint32_t dispatchX = (uint32_t)ceil(width / 16.0f);
			uint32_t dispatchY = (uint32_t)ceil(height / 16.0f);

			uvec4 vec;
			vec.x = dispatchX;
			vec.y = dispatchY;
			shader->SetParam<CBuffer::DispatchInfo>(vec);

			shader->Dipatch(dispatchX, dispatchY, 1);
			buffer.UnSetTarget();

			auto data = buffer.GetData();
			float averageLum = 0.0f;
			for (uint32_t i = 0; i < dispatchY; ++i)
			{
				for (uint32_t j = 0; j < dispatchX; ++j)
				{
					averageLum += data[i * dispatchX + j];
				}
			}
			averageLum /= width * height;
			buffer.Unmap();
			LOG_ELAPSE
				LOG_INFO("{0} gpu average", averageLum);
		}
	}

	void Renderer::exhdr()
	{
		uint32_t dispatchX = (uint32_t)ceil(Dx11Core::Get().Width() / 16.0f);
		uint32_t dispatchY = (uint32_t)ceil(Dx11Core::Get().Height() / 16.0f);
		auto shader = ShaderArchive::Get("HDRAverage");

		shader->Bind();
		SBuffer<float> buffer(SBufferType::Write, nullptr, 1);
		buffer.Bind(0);
		//texture.Bind(0); // HDR texture

		shader->Dipatch(dispatchX, dispatchY, 1);
		buffer.UnSetTarget();

		auto data = buffer.GetData();
		float averageLum = 0.0f;

		for (uint32_t i = 0; i < dispatchY; ++i)
		{
			for (uint32_t j = 0; j < dispatchX; ++j)
			{
				averageLum += data[i * dispatchX + j];
			}
		}
		averageLum /= float(Dx11Core::Get().Width() *Dx11Core::Get().Height());
	}

	void Renderer::experiment1(std::shared_ptr<Model3D> model, float tFactor)
	{
		s_Data.PLController->ClearRTT();

		s_Data.PLController->SetRenderTarget("BackBuffer");

		s_Data.PLController->SetDepthStencil(DepthStencilOpt::Enable);
		s_Data.PLController->SetRasterize(RasterlizerOpt::Wire);

		//auto d2 = ShaderArchive::Get("2D");
		//d2->Bind();

		//Transform t;
		//t.SetScale(0.3f, 0.3f, 0.3f);
		//d2->SetParam<CBuffer::Transform>(t);
		//s_Data.ModelBuffer2D->Bind();
		////model->m_Texture->Bind(0);
		////Dx11Core::Get().Context->PSSetShaderResources(0, 1, &s_Data.SpotShadowMaps[0]->m_ShaderResourceView);

		//Dx11Core::Get().Context->DrawIndexed(s_Data.ModelBuffer2D->GetIndexCount(), 0, 0);
		//d2->Unbind();

		auto myShader = ShaderArchive::Get("EtcPNTriangle");
		//auto myShader = ShaderArchive::Get("Etcbasic");
		myShader->Bind();
		myShader->SetParam<CBuffer::Transform>(model->m_Transform);
		myShader->SetParam<CBuffer::Camera>(*s_Data.ActiveCamera);
		myShader->SetParam<CBuffer::TFactor>(tFactor);

		model->m_ModelBuffer->Bind();
		Dx11Core::Get().Context->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST);
		Dx11Core::Get().Context->DrawIndexed(model->m_ModelBuffer->GetIndexCount(), 0, 0);

		s_Data.Queued2D.clear();
		s_Data.Queued3D.clear();
		s_Data.QueuedLight.clear();

	}